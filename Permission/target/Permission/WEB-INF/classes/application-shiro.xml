<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
">

    <!--login成功失败的filter    ====  需要交给shiroFilter让他知道  ====-->
    <bean id="myFormFilter" class="com.yb.web.filter.MyFormFilter"/>
    <!--<bean id="systemLogoutFilter" class="com.yb.web.filter.SystemLogoutFilter"/>-->
    <!-- 配置shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--
            配置登录的地址
            其他请求回去判断是否有认证过，没认证的重新回到login.jsp
            要是认证失败时如果有loginURL请求 那么就会给你去做认证 认证地址就是value里面的地址
         -->
        <property name="loginUrl" value="/login"/>

        <!--配置form=== filter过滤器-->
        <property name="filters">
            <map>
                <!--authc 指定需要身份认证-->
                <entry key="authc" value-ref="myFormFilter"/>
                <!--使用自定义过滤器-->
                <!--<entry key="logout" value-ref="systemLogoutFilter" />-->
            </map>
        </property>
        <!--注入安全管理器-->
        <property name="securityManager" ref="securityManager"></property>
        <!-- 配置shiro过滤器pattern -->
        <property name="filterChainDefinitions">
            <value>
                /static/** = anon   <!--不需要登录验证-->
                /login.jsp = anon   <!--不需要登录验证-->
                /logout = logout  <!--当拦截到logout这个请求时就会到自定义过滤器清除缓存-->
                /**=authc     <!--除指定请求外,其它所有的请求都需要身份验证-->
            </value>
        </property>
    </bean>
    <!--自定义realms-->
    <bean id="employeeRealms" class="com.yb.web.realms.EmployeeReamls">
        <!--注入凭证匹配器-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <!-- 配置shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="employeeRealms"/>
        <!--注入缓存授权-->
        <property name="cacheManager" ref="ehCache"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!-- 散列算法 -->
        <property name="hashAlgorithmName" value="md5"/>
        <!-- 散列次数 -->
        <property name="hashIterations" value="2"></property>
    </bean>

    <!-- 缓存管理器 -->
    <bean id="ehCache" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
    </bean>

    <!--
    配置为true即使用cglib继承的方式,
    false为jdk的接口动态代理   控制器没有实现接口
    -->
    <aop:config proxy-target-class="true" ></aop:config>

    <!-- 使用第三方去扫描shiro的注解 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor ">
        <property name="securityManager" ref="securityManager"></property>
    </bean>

</beans>